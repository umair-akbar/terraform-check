name: "AWS-SLZ-Sec"

trigger:
- main

pool:
  vmImage: 'ubuntu-latest'

steps:
#- script: |
#    sudo apt-get update
#    sudo apt-get install wget unzip awscli
#    sudo wget https://releases.hashicorp.com/terraform/0.13.7/terraform_0.13.7_linux_amd64.zip
#    unzip ./terraform_0.13.7_linux_amd64.zip
#    sudo mv terraform /usr/local/bin
#    terraform version
  # && $(ls -als | grep -v "README" | grep -v "Makefile" | grep -v "yml" | grep -v "git")
  # ############  # Ctrl+K to uncomment below lines 20-36 once tfplan can be run and environment is ready. Only root_module pipeline variable needs to be filled or can be hardcoded on a per pipeline basis
  # ############
  # base_dir=$(pwd)
  # cd $(ROOT_MODULE)
  # loop through each submodule in the root module e.g dev/npd/prod
  # for dir_name in */; do
  #   if [[ -d "$dir_name" ]]; then
  #     # Update backend.tf if applicable
  #     terraform init
  #     terraform validate
  #     # Make Plan for each submodule
  #     terraform plan -input=false -out "${ROOT_MODULE}-${dir_name}.tfplan"
  #     # Convert tfplan to json and store in base_dir of azure devops where this script runs so Prisma can scan the plan file
  #     terraform show -json "${ROOT_MODULE}-${dir_name}.tfplan" > "${dir_root}/${ROOT_MODULE}-${dir_name}-plan.json"
  #   fi
  # done
  # cd "$base_dir"
  # #############
  # # Develepor Comments : Make script set -e or make it gracefully exit on error if any one line fails from above
  # #############
#  workingDirectory: '$(Build.Repository.LocalPath)'
#  displayName: 'Terraform Install'

- task: Prisma Cloud IaC Scan@3
  inputs:
    Path: '$(Build.Repository.LocalPath)'
    prismaCloudService: 'PrismaAWSconnector'
    High: '1'
    Medium: '1'
    Low: '1'
    Operator: 'or'
    Tags: 'SLZ:AWS'

- script: |
    chmod +x .build/ts.sh && ./.build/ts.sh "pipeline"
  workingDirectory: '$(Build.Repository.LocalPath)'
  displayName: 'Terrascan'
  continueOnError: true
  timeoutInMinutes: 5

- task: PublishTestResults@2
  inputs:
    testResultsFormat: 'JUnit'
    testResultsFiles: 'ts.xml'
    mergeTestResults: true
    failTaskOnFailedTests: true
    searchFolder: '$(Build.Repository.LocalPath)'
    buildPlatform: 'AWS'
    buildConfiguration: 'TerraScan'

# # Send to release pipeline to deploy to environment
# - task: PublishBuildArtifacts@1
#   inputs:
#     PathtoPublish: '$(Build.ArtifactStagingDirectory)'
#     ArtifactName: 'aws_tf'
#     publishLocation: 'Container'
